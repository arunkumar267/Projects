
import java.awt.Desktop;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.net.*;
import java.io.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Home.java
 *
 * Created on Feb 23, 2013, 8:56:57 PM
 */
/**
 *
 * @author Elcot
 */
public class Home extends javax.swing.JFrame {
        InetAddress ia;
        final int portno=21;
        String status="Listening..";
String clientpath,serverpath;        
     //socket

        
        ServerSocket serverSocket;
     Socket clientSocket = null;  
     
     //file object
     DefaultListModel listmodel;
     FileOutputStream fos;  
     BufferedOutputStream bos;  
     OutputStream output;  
     DataOutputStream dos;  
     int len;  
     int smblen;   
     InputStream in;  
     boolean flag=true,flag2=true,con=false;  
     boolean flag1=true,flag5=true;
     DataInputStream clientData;  
     BufferedInputStream clientBuff;  
     



/** Creates new form Home */
    public Home() throws UnknownHostException, IOException {
  
        ia=InetAddress.getLocalHost();
        initComponents();
        jLabel3.setText(ia.getHostName());
        jLabel4.setText(ia.getHostAddress());
        jLabel6.setText(""+portno);
        jLabel8.setText(status);
      
   Desktop desktop = null;
      if (Desktop.isDesktopSupported()) {
        desktop = Desktop.getDesktop();
      }
   desktop.open(new File("C:\\Users\\Elcot\\Desktop\\Monitoring\\ClientMonitor.exe")); 
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jTabbedPane4 = new javax.swing.JTabbedPane();
        jTabbedPane5 = new javax.swing.JTabbedPane();
        jTabbedPane6 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jTabbedPane7 = new javax.swing.JTabbedPane();
        jComboBox1 = new javax.swing.JComboBox();
        jComboBox2 = new javax.swing.JComboBox();
        jTextField1 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Server");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 102, 102), 1, true));

        jTabbedPane1.setBackground(new java.awt.Color(153, 255, 153));
        jTabbedPane1.setForeground(new java.awt.Color(0, 0, 153));
        jTabbedPane1.setFont(new java.awt.Font("Vani", 3, 14));
        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseClicked(evt);
            }
        });
        jTabbedPane1.addTab("Connect  ", jTabbedPane2);
        jTabbedPane1.addTab("List Drives  ", jTabbedPane3);
        jTabbedPane1.addTab("List Directories  ", jTabbedPane4);
        jTabbedPane1.addTab("List Files  ", jTabbedPane5);
        jTabbedPane1.addTab("Receive File  ", jTabbedPane6);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 866, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Modify File  ", jPanel3);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 866, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Disconnect  ", jPanel4);
        jTabbedPane1.addTab("Close Server  ", jTabbedPane7);

        jComboBox1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBox1MouseClicked(evt);
            }
        });
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });

        jComboBox2.setForeground(new java.awt.Color(0, 0, 204));
        jComboBox2.setMaximumRowCount(25);
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Directory" }));
        jComboBox2.setAutoscrolls(true);
        jComboBox2.setFocusCycleRoot(true);
        jComboBox2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox2ItemStateChanged(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Dialog", 3, 18));
        jLabel9.setForeground(new java.awt.Color(255, 0, 204));
        jLabel9.setText("Selected");

        jComboBox3.setForeground(new java.awt.Color(0, 0, 204));
        jComboBox3.setMaximumRowCount(25);
        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select File" }));
        jComboBox3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox3ItemStateChanged(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jButton1.setText("Modify");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(41, 41, 41)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 574, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton1))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 441, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(121, 121, 121)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 871, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 481, Short.MAX_VALUE)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 481, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("Connect");

        jPanel2.setBackground(new java.awt.Color(173, 211, 248));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Server Info", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Lucida Sans Typewriter", 3, 18), java.awt.Color.red)); // NOI18N

        jLabel1.setText("Server Name :");

        jLabel2.setText("Server IP        :");

        jLabel3.setForeground(new java.awt.Color(0, 0, 255));
        jLabel3.setText("jLabel3");

        jLabel4.setForeground(new java.awt.Color(255, 0, 0));
        jLabel4.setText("jLabel4");

        jLabel5.setText("Server Port     :");

        jLabel6.setForeground(new java.awt.Color(0, 0, 255));
        jLabel6.setText("kjghdfhd");

        jLabel8.setForeground(new java.awt.Color(255, 0, 0));
        jLabel8.setText("Listening..");

        jLabel7.setText("Status             :");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel8))
                .addContainerGap(93, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4))
                .addGap(28, 28, 28)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addContainerGap(105, Short.MAX_VALUE))
        );

        jLabel8.getAccessibleContext().setAccessibleParent(this);

        jPanel5.setBackground(new java.awt.Color(173, 211, 248));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Client Info", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Lucida Sans Typewriter", 3, 18), java.awt.Color.orange)); // NOI18N

        jLabel10.setText("Client Name   :");

        jLabel11.setText("Client IP         :");

        jLabel12.setForeground(new java.awt.Color(0, 0, 255));
        jLabel12.setText("UnKnown");

        jLabel13.setForeground(new java.awt.Color(255, 0, 0));
        jLabel13.setText("UnKnown");

        jLabel16.setForeground(new java.awt.Color(255, 0, 0));
        jLabel16.setText("Not connected..");

        jLabel17.setText("Status            :");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(jLabel17))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel16)
                    .addComponent(jLabel13)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel12))
                .addGap(27, 27, 27)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel13))
                .addGap(31, 31, 31)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(jLabel16))
                .addContainerGap(142, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void jTabbedPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseClicked
// TODO add your handling code here:
int j=jTabbedPane1.getSelectedIndex();
String choice=jTabbedPane1.getTitleAt(j);
System.out.println(choice);

if(choice.equalsIgnoreCase("Connect  "))
{
        try
        {
            serverSocket = new ServerSocket(portno);  
    
        clientSocket = serverSocket.accept();  
    int i=clientSocket.getReceiveBufferSize();
     System.out.println("Buf size:"+i);
   
    jLabel8.setText("Connection Established...");
    while(con==false)
        {
        in = clientSocket.getInputStream(); //used    
        clientData = new DataInputStream(in); //use   
       jLabel12.setText(clientData.readUTF());
       jLabel13.setText(clientData.readUTF());
        if(!jLabel12.getText().equals("UnKnown"))
        {
            con=true;
            jLabel16.setText("Established..");
       
        }
            }                  
        }
        catch(Exception e)
        {
            
        }
}
else if(choice.equalsIgnoreCase("List Drives  "))
{
    
    
    try
    {
                       
    OutputStream os = clientSocket.getOutputStream();    
    DataOutputStream dos = new DataOutputStream(os);       
    dos.writeUTF("List Drives");  
    
             while(true)
    {
            while(flag1==true)
            {
                            in = clientSocket.getInputStream(); //used    
                            clientData = new DataInputStream(in); //use   
                            clientBuff = new BufferedInputStream(in); //use   
                            System.out.println("Starting...");    
                            int fileSize = clientData.read();  
                            System.out.println("File Size : "+fileSize);
                            ArrayList<File>files=new ArrayList<File>(fileSize); //store list of filename from client directory  
                            //Start to accept those filename from server  
                            for (int count=0;count < fileSize;count ++)
                            {  
                                    File ff=new File(clientData.readUTF());  
                                    files.add(ff); 
                                    System.out.println("Drive: "+files.get(count));
                                    jComboBox1.addItem("\n"+files.get(count).toString());
                                      }  
                                                                               
                            
                            for(int count=0;count < fileSize;count ++)
                            {  
                                     
                                   if (fileSize - count == 0)
                                   {  
                                  flag1 =false;  
                                  }  
                                  
                            }  
                            }      
                         
            if (flag1==true) 
            {  
            clientSocket = serverSocket.accept();  
            }  
   
     }      
    }
    catch(Exception t)
    {
        
    }
    
    
}

else if(choice.equalsIgnoreCase("List Directories  "))
{
    try
    {
        
        clientSocket = serverSocket.accept();  
    OutputStream os = clientSocket.getOutputStream();    
    DataOutputStream dos = new DataOutputStream(os);   
    
    String list="List Directory";
    String out=list.concat(jTextField1.getText());
    System.out.println("\nSent "+out);
    dos.writeUTF(out);  
    
       System.out.println("directory reading.."); 
   
    
    
    
             while(true)
    {
            while(flag2==true)
            {
                            in = clientSocket.getInputStream(); //used    
                            clientData = new DataInputStream(in); //use   
                            clientBuff = new BufferedInputStream(in); //use   
                            System.out.println("Starting...");    
                            int fileSize =1000; 
                            System.out.println("File Size : "+fileSize);
                            ArrayList<File>files=new ArrayList<File>(fileSize); //store list of filename from client directory  
                            //Start to accept those filename from server  
                            for (int count=0;count < fileSize;count ++)
                            {  
                                    File ff=new File(clientData.readUTF());  
                                    files.add(ff); 
                                    System.out.println("Dir: "+files.get(count));
                                    jComboBox2.addItem("\n"+files.get(count).toString());
                                     
                            }  
                                                                               
                            
                            for(int count=0;count < fileSize;count ++)
                            {  
                                     
                                   if (fileSize - count == 0)
                                   {  
                                  flag2 =false;  
                                  }  
                                  
                            }  
                            }      
                         
            if (flag2==true) 
            {  
            clientSocket = serverSocket.accept();  
            }  
  
     }      
   }
    catch(Exception l)
    {
            
    }
}
else if(choice.equalsIgnoreCase("List Files  "))
{
    try
    {  
    clientSocket = serverSocket.accept();  
    OutputStream os = clientSocket.getOutputStream();    
    DataOutputStream dos = new DataOutputStream(os);   
    
    String list="List Files";
    String out=list.concat(jTextField1.getText());
    System.out.println("\nSent "+out);
    dos.writeUTF(out);  
    System.out.println("file reading.."); 
  
             while(true)
    {
            while(flag2==true)
            {
                            in = clientSocket.getInputStream(); //used    
                            clientData = new DataInputStream(in); //use   
                            clientBuff = new BufferedInputStream(in); //use   
                            System.out.println("Starting...");    
                            int fileSize =1000; 
                            System.out.println("File Size : "+fileSize);
                            ArrayList<File>files=new ArrayList<File>(fileSize); //store list of filename from client directory  
                            //Start to accept those filename from server  
                            for (int count=0;count < fileSize;count ++)
                            {  
                                    File ff=new File(clientData.readUTF());  
                                    files.add(ff); 
                                    System.out.println("File: "+files.get(count));
                                    jComboBox3.addItem("\n"+files.get(count).toString());
                                     
                            }  
                                                                               
                            
                            for(int count=0;count < fileSize;count ++)
                            {  
                                     
                                   if (fileSize - count == 0)
                                   {  
                                  flag2 =false;  
                                  }  
                                  
                            }  
                            }      
                         
            if (flag2==true) 
            {  
            clientSocket = serverSocket.accept();  
            }  
  
     }      
   }
    catch(Exception l)
    {
            
    }
}


else if(choice.equalsIgnoreCase("Receive File  "))
{
            try {
                
                
                
    clientSocket = serverSocket.accept();  
    OutputStream os = clientSocket.getOutputStream();    
    DataOutputStream dos = new DataOutputStream(os);   
    File f=new File(jTextField1.getText());
    String path=f.getParent();
    System.out.println("To be Received.. : "+path);
    
    char a[]=path.toCharArray();
len=a.length;
String cat="";   
for(int i=0;i<=len-1;i++)
{
 if(a[i]=='\\')
  a[i]='/';  
    System.out.println(a[i]);
    cat=cat+""+a[i];
}
cat=cat+""+"/";  
System.out.println("\nSent "+cat);
   String list="Receive Files";
    String out=list.concat(cat);
    System.out.println("\nSent "+out);
    dos.writeUTF(out);  
    
       System.out.println("file reading.."); 
                try {
                    receiveFiles();
                } catch (Exception ex) {
                    Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                }
            } catch (IOException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }
}

else if(choice.equalsIgnoreCase("Disconnect  "))
{
            try {
                clientSocket = serverSocket.accept();  
            OutputStream os = clientSocket.getOutputStream();    
            DataOutputStream dos = new DataOutputStream(os);          
            String list="Disconnect";
            dos.writeUTF(list);
            } catch (IOException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }
        
}


else if(choice.equalsIgnoreCase("Modify File  "))
{
    JOptionPane.showMessageDialog(this,"Select Server file Location..");
       
}
else if(choice.equalsIgnoreCase("Close Server  "))
{
            try {
                clientSocket = serverSocket.accept();  
            OutputStream os = clientSocket.getOutputStream();    
            DataOutputStream dos = new DataOutputStream(os);          
            String list="Disconnect";
            dos.writeUTF(list);
            System.exit(0);
            } catch (IOException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }
       }


}//GEN-LAST:event_jTabbedPane1MouseClicked

private void jComboBox1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox1MouseClicked
// TODO add your handling code here:

//jTextField1.setText(jComboBox1.getSelectedItem().toString());
}//GEN-LAST:event_jComboBox1MouseClicked

private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
// TODO add your handling code here:
jTextField1.setText(jComboBox1.getSelectedItem().toString());

}//GEN-LAST:event_jComboBox1ItemStateChanged

private void jComboBox2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox2ItemStateChanged
// TODO add your handling code here:
jTextField1.setText(jComboBox2.getSelectedItem().toString());

}//GEN-LAST:event_jComboBox2ItemStateChanged

private void jComboBox3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox3ItemStateChanged
// TODO add your handling code here:
jTextField1.setText(jComboBox3.getSelectedItem().toString());
serverpath=jComboBox3.getSelectedItem().toString();

}//GEN-LAST:event_jComboBox3ItemStateChanged

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
// TODO add your handling code here:


 //   ModifyFile f=new ModifyFile();
   //  f.serfile(jTextField1.getText());
  
     //       f.setVisible(true);
JOptionPane.showMessageDialog(this,"Select file Location in Client..");  
JFileChooser fileChooser = new JFileChooser(".");
File t=new File("D:/project file/temp1");
fileChooser.setSelectedFile(t);
    fileChooser.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        System.out.println("Action");

      }
    });
    
    int status = fileChooser.showOpenDialog(null);

   if (status == JFileChooser.APPROVE_OPTION) {
            try {
                File selectedFile = fileChooser.getSelectedFile();
                System.out.println(selectedFile.getParent());
                System.out.println(selectedFile.getName());
                try {
                    modifyfile(selectedFile.getPath(),serverpath);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }
    } else if (status == JFileChooser.CANCEL_OPTION) {
      System.out.println("canceled");

}

}//GEN-LAST:event_jButton1ActionPerformed


    /**
     * @param args the command line arguments
     */

    public void server_connection() throws Exception
    {  
    serverSocket = new ServerSocket(21);  
    clientSocket = serverSocket.accept();  
        
     }
    
public void receiveDrives() throws IOException
{
        
               
    while(true)
    {
            while(flag1==true)
            {
                            in = clientSocket.getInputStream(); //used    
                            clientData = new DataInputStream(in); //use   
                            clientBuff = new BufferedInputStream(in); //use   
                            System.out.println("Starting...");    
                            int fileSize = clientData.read();  
                            System.out.println("File Size : "+fileSize);
                            ArrayList<File>files=new ArrayList<File>(fileSize); //store list of filename from client directory  
                            //Start to accept those filename from server  
                            for (int count=0;count < fileSize;count ++)
                            {  
                                    File ff=new File(clientData.readUTF());  
                                    System.out.println("Drivesss: "+ff.toString());
                                    
                                    files.add(ff); 
                                    System.out.println("Drive: "+files.get(count));
                                                                                                
                            }  
                           
                            for (int count=0;count < fileSize;count ++)
                            {  
                               System.out.println("File Namessss: "+files.get(count));
                            }  
                
                            
                            
                            for (int count=0;count < fileSize;count ++)
                            {  
                                     
                                   if (fileSize - count == 1)
                                   {  
                                  flag1 =false;  
                                  }  
                                  
                            }  
                              
            }      
                         
            if (flag1==true) 
            {  
            clientSocket = serverSocket.accept();  
            flag1 = true;  
            }  
  
     }
}

public void receiveFiles() throws IOException, InterruptedException
{
    boolean next=false;
    flag=true;
    int fileSize=0;
    clientSocket = serverSocket.accept();  
    
      while(true&&flag==true){    
            
            in = clientSocket.getInputStream(); //used    
            clientData = new DataInputStream(in); //use   
            clientBuff = new BufferedInputStream(in); //use   
           
            System.out.println("Starting...");    
                 
                fileSize = clientData.read();  
                     System.out.println("File Size : "+fileSize);
                ArrayList<File>files=new ArrayList<File>(fileSize); //store list of filename from client directory  
                ArrayList<Integer>sizes = new ArrayList<Integer>(fileSize); //store file size from client  
                //Start to accept those filename from server  
                for (int count=0;count < fileSize;count ++){  
                        File ff=new File(clientData.readUTF());  
                        files.add(ff);  
                }  
                  
                for (int count=0;count < fileSize;count ++){  
                      
                        sizes.add(clientData.readInt());  
                }  
                  
               for (int count =0;count < fileSize ;count ++){    
                     
                   if (fileSize - count == 1){  
                       flag =false;  
                   }  
      
                  len=sizes.get(count);  
                             
                System.out.println("File Size ="+len);  
                output = new FileOutputStream("D:/Project/project file/temp/" + files.get(count));  
                dos=new DataOutputStream(output);  
                bos=new BufferedOutputStream(output);  
                byte[] buffer = new byte[1024];    
                                bos.write(buffer, 0, buffer.length); //This line is important  
                  
                while (len > 0 && (smblen = clientData.read(buffer)) > 0) {   
                    dos.write(buffer, 0, smblen);   
                      len = len - smblen;  
                      dos.flush();  
                    }  
                next=true;
                  dos.close();  //It should close to avoid continue deploy by resource under view  
               }     
                             
       }  
                   if (flag==true){  
             clientSocket = serverSocket.accept();  
              }  
        
          //end of while(true)  
         
    if(next==true)
    {
        FileReceive t=new FileReceive();
        t.setVisible(true);
     }

}//fuction
  public void sendServerloc(String ip)
  {
      if(ip.equals("get"))
      {
          jButton1.setLabel("ok");
      }
  }

  
  public void modifyfile(String clspath,String serpath) throws FileNotFoundException, IOException, InterruptedException
  {
      System.out.println("Received Client path: "+clspath);
      System.out.println("Client path: "+serpath);
      clientSocket = serverSocket.accept();  
    OutputStream os = clientSocket.getOutputStream();    
    DataOutputStream dos = new DataOutputStream(os);   
    

          char a[]=clspath.toCharArray();
len=a.length;
String cat="";   
for(int i=0;i<=len-1;i++)
{
 if(a[i]=='\\')
  a[i]='/';  
    System.out.println(a[i]);
    cat=cat+""+a[i];
}
   

System.out.println("sent from Client path: "+cat);
      

char b[]=serpath.toCharArray();
len=b.length;
String cat1="";   
for(int i=0;i<=len-1;i++)
{
 if(b[i]=='\\')
  b[i]='/';  
    System.out.println(b[i]);
    cat1=cat1+""+b[i];
}
System.out.println("\nServer file name "+cat1);
System.out.println("\nSent "+cat1);
String list="Modify File";
String out=list.concat(cat1);
System.out.println("\nSent "+out);

dos.writeUTF(out);  
      
              File transferFile = new File (cat);
              byte [] bytearray  = new byte [(int)transferFile.length()];
              FileInputStream fin = new FileInputStream(transferFile);
              BufferedInputStream bin = new BufferedInputStream(fin);
              bin.read(bytearray,0,bytearray.length);
              OutputStream os1 = clientSocket.getOutputStream();
              System.out.println("Sending Files...");
              os1.write(bytearray,0,bytearray.length);
              os1.flush();
              Thread.sleep(500);
              JOptionPane.showMessageDialog(this,"File has been modified in Server..");  

              //clientSocket.close();
   
         
  }
  
    public static void main(String args[]) throws UnknownHostException, Exception{
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                try {
                    new Home().setVisible(true);
                    
                } catch (Exception ex) {
                    Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                }
                    
            }
            
        });
    }
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    public javax.swing.JLabel jLabel16;
    public javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    public javax.swing.JLabel jLabel7;
    public javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JTabbedPane jTabbedPane4;
    private javax.swing.JTabbedPane jTabbedPane5;
    private javax.swing.JTabbedPane jTabbedPane6;
    private javax.swing.JTabbedPane jTabbedPane7;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
